package io.cequence.openaiscala.domain.responsesapi.tools

import io.cequence.openaiscala.domain.responsesapi.{Input, Output}

/**
 * Represents a code interpreter tool call made by the model.
 *
 * @param code
 *   The code to run, or null if not available.
 * @param containerId
 *   The ID of the container used to run the code.
 * @param id
 *   The unique ID of the code interpreter tool call.
 * @param outputs
 *   The outputs generated by the code interpreter, such as logs or images. Can be null if no
 *   outputs are available.
 * @param status
 *   The status of the code interpreter tool call. Valid values are: in_progress, completed,
 *   incomplete, interpreting, and failed. TODO: introduce enum
 */
final case class CodeInterpreterToolCall(
  id: String,
  code: Option[String],
  containerId: String,
  outputs: Seq[CodeInterpreterOutput],
  status: String
) extends ToolCall
    with Input
    with Output {
  val `type`: String = "code_interpreter_call"
}

trait CodeInterpreterOutput {
  val `type`: String
}

/**
 * The logs output from the code interpreter.
 *
 * @param logs
 *   The logs output from the code interpreter.
 */
final case class CodeInterpreterOutputLogs(
  logs: String
) extends CodeInterpreterOutput {
  val `type`: String = "logs"
}

/**
 * The image output from the code interpreter.
 *
 * @param url
 *   The URL of the image output from the code interpreter.
 */
final case class CodeInterpreterOutputImage(
  url: String
) extends CodeInterpreterOutput {
  val `type`: String = "image"
}
