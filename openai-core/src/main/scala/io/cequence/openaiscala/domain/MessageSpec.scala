package io.cequence.openaiscala.domain

sealed trait BaseMessageSpec {
  val role: ChatRole
  val contentOptional: Option[String]
  val name: Option[String]
}

final case class MessageSpec(
    // The role of the messages author. One of system, user, or assistant.
    role: ChatRole,

    // The contents of the message.
    content: String,

    // The name of the author of this message. name is required if role is function, and
    // it should be the name of the function whose response is in the content.
    // May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    name: Option[String] = None
) extends BaseMessageSpec {
  override val contentOptional: Some[String] = Some(content)
}

final case class FunMessageSpec(
    // The role of the messages author. One of system, user, assistant, or function.
    role: ChatRole,

    // The contents of the message. Content is required for all messages except assistant messages with function calls.
    content: Option[String],

    // The name of the author of this message. name is required if role is function, and
    // it should be the name of the function whose response is in the content.
    // May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    name: Option[String] = None,

    // The name and arguments of a function that should be called, as generated by the model.
    function_call: Option[FunctionCallSpec] = None
) extends BaseMessageSpec {
  override val contentOptional = content
}

case class FunctionCallSpec(
    name: String,
    arguments: String
)
